# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- development

variables:
  ImageName: 'carpooling:$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest
stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:  
    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build'  
    - task: Docker@1      
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Reg'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        tags: 'zhzhelev/+$(Build.BuildId)'
        imageName: '$(ImageName)'
        # useDefaultContext: false
        # buildContext: 'CustomerApi'
        displayName: 'Build the Docker image'
    - task: Docker@1      
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Reg'
        command: 'Push an image'
        tags: 'zhzhelev/+$(Build.BuildId)'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Push the Docker image to Dockerhub'



    # - task: Gradle@3
    #   inputs:
    #     gradleWrapperFile: 'gradlew'
    #     tasks: 'build'
    #     publishJUnitResults: true
    #     testResultsFiles: '**/TEST-*.xml'
    #     javaHomeOption: 'JDKVersion'
    #     jdkVersionOption: '1.8'
    #     sonarQubeRunAnalysis: true
    #     sqGradlePluginVersionChoice: 'specify'
    #     sonarQubeGradlePluginVersion: '2.6.1'
    #     checkStyleRunAnalysis: true
    #     findBugsRunAnalysis: true
    #     spotBugsAnalysis: false


# stages:
#   - stage: BuildApp
#     jobs:
#       - job: BuildPushImage
#         steps:
#         - task: Docker@2
#           inputs:
#             containerRegistry: 'Docker reg'
#             repository: 'carpooling'
#             command: 'buildAndPush'
#             Dockerfile: '**/Dockerfile'
#             tags: '$(Build.BuildId)'
# stages:
# - stage: Build
#   displayName: Build image
#   jobs:  
#   - job: Build
#     displayName: Build and push Docker image
#     steps:
#     - task: Gradle@2
#         inputs:
#           workingDirectory: ''
#           gradleWrapperFile: 'gradlew'
#           gradleOptions: '-Xmx3072m'
#           javaHomeOption: 'JDKVersion'
#           jdkVersionOption: '1.8'
#           jdkArchitectureOption: 'x64'
#           publishJUnitResults: true
#           testResultsFiles: '**/TEST-*.xml'
#           tasks: 'build'
#     - task: Docker@1      
#       inputs:
#         containerregistrytype: 'Container Registry'
#         dockerRegistryEndpoint: 'Docker Hub'
#         command: 'Build an image'
#         dockerFile: '**/Dockerfile'
#         imageName: '$(ImageName)'
#         useDefaultContext: false
#         buildContext: 'CustomerApi'
#       displayName: 'Build the Docker image'